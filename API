# API for dplyr package

## Exported functions

add_count(x, ..., wt = NULL, sort = FALSE)
add_count_(x, vars, wt = NULL, sort = FALSE)
add_rownames(df, var = "rowname")
add_tally(x, wt, sort = FALSE)
add_tally_(x, wt, sort = FALSE)
all_equal(target, current, ignore_col_order = TRUE, ignore_row_order = TRUE, convert = FALSE, ...)
all_vars(expr)
anti_join(x, y, by = NULL, copy = FALSE, ...)
any_vars(expr)
arrange(.data, ...)
arrange_(.data, ..., .dots = list())
arrange_all(.tbl, .funs = list(), ...)
arrange_at(.tbl, .vars, .funs = list(), ...)
arrange_if(.tbl, .predicate, .funs = list(), ...)
as.tbl(x, ...)
as.tbl_cube(x, ...)
auto_copy(x, y, copy = FALSE, ...)
bench_tbls(tbls, op, ..., times = 10)
between(x, left, right)
bind_cols(...)
bind_rows(..., .id = NULL)
case_when(...)
changes(x, y)
check_dbplyr()
coalesce(...)
collapse(x, ...)
collect(x, ...)
combine(...)
common_by(by = NULL, x, y)
compare_tbls(tbls, op, ref = NULL, compare = equal_data_frame, ...)
compare_tbls2(tbls_x, tbls_y, op, ref = NULL, compare = equal_data_frame, ...)
compute(x, name = random_table_name(), ...)
contains(match, ignore.case = TRUE, vars = current_vars())
copy_to(dest, df, name = deparse(substitute(df)), overwrite = FALSE, ...)
count(x, ..., wt = NULL, sort = FALSE)
count_(x, vars, wt = NULL, sort = FALSE)
cumall(x)
cumany(x)
cume_dist(x)
cummean(x)
current_vars()
db_analyze(con, table, ...)
db_begin(con, ...)
db_commit(con, ...)
db_create_index(con, table, columns, name = NULL, unique = FALSE, ...)
db_create_indexes(con, table, indexes = NULL, unique = FALSE, ...)
db_create_table(con, table, types, temporary = FALSE, ...)
db_data_type(con, fields)
db_desc(x)
db_drop_table(con, table, force = FALSE, ...)
db_explain(con, sql, ...)
db_has_table(con, table)
db_insert_into(con, table, values, ...)
db_list_tables(con)
db_query_fields(con, sql, ...)
db_query_rows(con, sql, ...)
db_rollback(con, ...)
db_save_query(con, sql, name, temporary = TRUE, ...)
db_write_table(con, table, types, values, temporary = FALSE, ...)
dense_rank(x)
desc(x)
dim_desc(x)
distinct(.data, ..., .keep_all = FALSE)
distinct_(.data, ..., .dots, .keep_all = FALSE)
do(.data, ...)
do_(.data, ..., .dots = list())
ends_with(match, ignore.case = TRUE, vars = current_vars())
eval_tbls(tbls, op)
eval_tbls2(tbls_x, tbls_y, op)
everything(vars = current_vars())
explain(x, ...)
failwith(default = NULL, f, quiet = FALSE)
filter(.data, ...)
filter_(.data, ..., .dots = list())
filter_all(.tbl, .vars_predicate)
filter_at(.tbl, .vars, .vars_predicate)
filter_if(.tbl, .predicate, .vars_predicate)
first(x, order_by = NULL, default = default_missing(x))
full_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
funs(..., .args = list())
funs_(dots, args = list(), env = base_env())
group_by(.data, ..., add = FALSE)
group_by_(.data, ..., .dots = list(), add = FALSE)
group_by_all(.tbl, .funs = list(), ...)
group_by_at(.tbl, .vars, .funs = list(), ..., .add = FALSE)
group_by_if(.tbl, .predicate, .funs = list(), ..., .add = FALSE)
group_by_prepare(.data, ..., .dots = list(), add = FALSE)
group_indices(.data, ...)
group_indices_(.data, ..., .dots = list())
group_size(x)
group_vars(x)
grouped_df(data, vars, drop = TRUE)
groups(x)
id(.variables, drop = FALSE)
ident(...)
if_else(condition, true, false, missing = NULL)
inner_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
intersect(x, y, ...)
is.grouped_df(x)
is.src(x)
is.tbl(x)
is_grouped_df(x)
lag(x, n = 1L, default = NA, order_by = NULL, ...)
last(x, order_by = NULL, default = default_missing(x))
lead(x, n = 1L, default = NA, order_by = NULL, ...)
left_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
location(df)
make_tbl(subclass, ...)
matches(match, ignore.case = TRUE, vars = current_vars())
min_rank(x)
mutate(.data, ...)
mutate_(.data, ..., .dots = list())
mutate_all(.tbl, .funs, ...)
mutate_at(.tbl, .vars, .funs, ..., .cols = NULL)
mutate_each(tbl, funs, ...)
mutate_each_(tbl, funs, vars)
mutate_if(.tbl, .predicate, .funs, ...)
n()
n_distinct(..., na.rm = FALSE)
n_groups(x)
na_if(x, y)
near(x, y, tol = .Machine$double.eps^0.5)
nth(x, n, order_by = NULL, default = default_missing(x))
ntile(x, n)
num_range(prefix, range, width = NULL, vars = current_vars())
one_of(..., vars = current_vars())
order_by(order_by, call)
percent_rank(x)
progress_estimated(n, min_time = 0)
pull(.data, var = -1)
recode(.x, ..., .default = NULL, .missing = NULL)
recode_factor(.x, ..., .default = NULL, .missing = NULL, .ordered = FALSE)
rename(.data, ...)
rename_(.data, ..., .dots = list())
rename_all(.tbl, .funs = list(), ...)
rename_at(.tbl, .vars, .funs = list(), ...)
rename_if(.tbl, .predicate, .funs = list(), ...)
rename_vars(vars, ..., strict = TRUE)
rename_vars_(vars, args)
right_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
row_number(x)
rowwise(data)
same_src(x, y)
sample_frac(tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL)
sample_n(tbl, size, replace = FALSE, weight = NULL, .env = NULL)
select(.data, ...)
select_(.data, ..., .dots = list())
select_all(.tbl, .funs = list(), ...)
select_at(.tbl, .vars, .funs = list(), ...)
select_if(.tbl, .predicate, .funs = list(), ...)
select_var(vars, var = -1)
select_vars(vars, ..., include = character(), exclude = character())
select_vars_(vars, args, include = character(), exclude = character())
semi_join(x, y, by = NULL, copy = FALSE, ...)
setdiff(x, y, ...)
setequal(x, y, ...)
show_query(x, ...)
slice(.data, ...)
slice_(.data, ..., .dots = list())
sql(...)
sql_escape_ident(con, x)
sql_escape_string(con, x)
sql_join(con, x, y, vars, type = "inner", by = NULL, ...)
sql_select(con, select, from, where = NULL, group_by = NULL, having = NULL, order_by = NULL, limit = NULL, distinct = FALSE, ...)
sql_semi_join(con, x, y, anti = FALSE, by = NULL, ...)
sql_set_op(con, x, y, method)
sql_subquery(con, from, name = random_table_name(), ...)
sql_translate_env(con)
src(subclass, ...)
src_df(pkg = NULL, env = NULL)
src_local(tbl, pkg = NULL, env = NULL)
src_mysql(dbname, host = NULL, port = 0L, username = "root", password, ...)
src_postgres(dbname = NULL, host = NULL, port = NULL, user = NULL, password = NULL, ...)
src_sqlite(path, create = FALSE)
src_tbls(x)
starts_with(match, ignore.case = TRUE, vars = current_vars())
summarise(.data, ...)
summarise_(.data, ..., .dots = list())
summarise_all(.tbl, .funs, ...)
summarise_at(.tbl, .vars, .funs, ..., .cols = NULL)
summarise_each(tbl, funs, ...)
summarise_each_(tbl, funs, vars)
summarise_if(.tbl, .predicate, .funs, ...)
summarize(.data, ...)
summarize_(.data, ..., .dots = list())
summarize_all(.tbl, .funs, ...)
summarize_at(.tbl, .vars, .funs, ..., .cols = NULL)
summarize_each(tbl, funs, ...)
summarize_each_(tbl, funs, vars)
summarize_if(.tbl, .predicate, .funs, ...)
tally(x, wt, sort = FALSE)
tally_(x, wt, sort = FALSE)
tbl(src, ...)
tbl_cube(dimensions, measures)
tbl_df(data)
tbl_nongroup_vars(x)
tbl_vars(x)
top_n(x, n, wt)
transmute(.data, ...)
transmute_(.data, ..., .dots = list())
transmute_all(.tbl, .funs, ...)
transmute_at(.tbl, .vars, .funs, ..., .cols = NULL)
transmute_if(.tbl, .predicate, .funs, ...)
ungroup(x, ...)
union(x, y, ...)
union_all(x, y, ...)
vars(...)
with_order(order_by, fun, x, ...)
wrap_dbplyr_obj(obj_name)

## S3 methods

anti_join.data.frame(x, y, by = NULL, copy = FALSE, ...)
anti_join.tbl_df(x, y, by = NULL, copy = FALSE, ..., na_matches = pkgconfig::get_config("dplyr::na_matches"))
arrange.data.frame(.data, ...)
arrange.default(.data, ...)
arrange.grouped_df(.data, ..., .by_group = FALSE)
arrange.tbl_df(.data, ...)
arrange_.data.frame(.data, ..., .dots = list())
arrange_.tbl_df(.data, ..., .dots = list())
as.tbl.data.frame(x, ...)
as.tbl.tbl(x, ...)
as.tbl_cube.array(x, dim_names = names(dimnames(x)), met_name = deparse(substitute(x)), ...)
as.tbl_cube.data.frame(x, dim_names = NULL, met_name = guess_met(x), ...)
as.tbl_cube.matrix(x, dim_names = names(dimnames(x)), met_name = deparse(substitute(x)), ...)
as.tbl_cube.table(x, dim_names = names(dimnames(x)), met_name = "Freq", ...)
auto_copy.tbl_cube(x, y, copy = FALSE, ...)
auto_copy.tbl_df(x, y, copy = FALSE, ...)
collapse.data.frame(x, ...)
collect.data.frame(x, ...)
common_by.NULL(by, x, y)
common_by.character(by, x, y)
common_by.default(by, x, y)
common_by.list(by, x, y)
compute.data.frame(x, ...)
copy_to.DBIConnection(dest, df, name = deparse(substitute(df)), overwrite = FALSE, ...)
copy_to.src_local(dest, df, name = deparse(substitute(df)), overwrite = FALSE, ...)
default_missing.data.frame(x)
default_missing.default(x)
distinct.data.frame(.data, ..., .keep_all = FALSE)
distinct.default(.data, ..., .keep_all = FALSE)
distinct.grouped_df(.data, ..., .keep_all = FALSE)
distinct.tbl_df(.data, ...)
distinct_.data.frame(.data, ..., .dots = list(), .keep_all = FALSE)
distinct_.grouped_df(.data, ..., .dots = list(), .keep_all = FALSE)
distinct_.tbl_df(.data, ..., .dots = list())
do.NULL(.data, ...)
do.data.frame(.data, ...)
do.default(.data, ...)
do.grouped_df(.data, ...)
do.rowwise_df(.data, ...)
do_.NULL(.data, ..., .dots = list())
do_.data.frame(.data, ..., .dots = list())
do_.grouped_df(.data, ..., env = caller_env(), .dots = list())
do_.rowwise_df(.data, ..., .dots = list())
filter.data.frame(.data, ...)
filter.default(.data, ...)
filter.tbl_cube(.data, ...)
filter.tbl_df(.data, ...)
filter.ts(.data, ...)
filter_.data.frame(.data, ..., .dots = list())
filter_.tbl_cube(.data, ..., .dots = list())
filter_.tbl_df(.data, ..., .dots = list())
full_join.data.frame(x, y, by = NULL, copy = FALSE, ...)
full_join.tbl_df(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ..., na_matches = pkgconfig::get_config("dplyr::na_matches"))
group_by.data.frame(.data, ..., add = FALSE)
group_by.default(.data, ..., add = FALSE)
group_by.rowwise_df(.data, ..., add = FALSE)
group_by.tbl_cube(.data, ..., add = FALSE)
group_by_.data.frame(.data, ..., .dots = list(), add = FALSE)
group_by_.rowwise_df(.data, ..., .dots = list(), add = FALSE)
group_by_.tbl_cube(.data, ..., .dots = list(), add = FALSE)
group_indices.data.frame(.data, ...)
group_indices.default(.data, ...)
group_indices.grouped_df(.data, ...)
group_indices_.data.frame(.data, ..., .dots = list())
group_indices_.grouped_df(.data, ..., .dots = list())
group_size.data.frame(x)
group_size.grouped_df(x)
group_size.rowwise_df(x)
group_vars.default(x)
group_vars.grouped_df(x)
group_vars.tbl_cube(x)
groups.data.frame(x)
groups.grouped_df(x)
groups.tbl_cube(x)
inner_join.data.frame(x, y, by = NULL, copy = FALSE, ...)
inner_join.tbl_df(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ..., na_matches = pkgconfig::get_config("dplyr::na_matches"))
intersect.data.frame(x, y, ...)
intersect.default(x, y, ...)
left_join.data.frame(x, y, by = NULL, copy = FALSE, ...)
left_join.tbl_df(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ..., na_matches = pkgconfig::get_config("dplyr::na_matches"))
mutate.data.frame(.data, ...)
mutate.default(.data, ...)
mutate.tbl_df(.data, ...)
mutate_.data.frame(.data, ..., .dots = list())
mutate_.tbl_df(.data, ..., .dots = list())
n_groups.data.frame(x)
n_groups.grouped_df(x)
n_groups.rowwise_df(x)
pull.data.frame(.data, var = -1)
recode.character(.x, ..., .default = NULL, .missing = NULL)
recode.factor(.x, ..., .default = NULL, .missing = NULL)
recode.numeric(.x, ..., .default = NULL, .missing = NULL)
rename.data.frame(.data, ...)
rename.default(.data, ...)
rename.grouped_df(.data, ...)
rename.tbl_cube(.data, ...)
rename_.data.frame(.data, ..., .dots = list())
rename_.grouped_df(.data, ..., .dots = list())
rename_.tbl_cube(.data, ..., .dots = list())
right_join.data.frame(x, y, by = NULL, copy = FALSE, ...)
right_join.tbl_df(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ..., na_matches = pkgconfig::get_config("dplyr::na_matches"))
same_src.data.frame(x, y)
same_src.tbl_cube(x, y)
sample_frac.data.frame(tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL)
sample_frac.default(tbl, size = 1, replace = FALSE, weight = NULL, .env = parent.frame())
sample_frac.grouped_df(tbl, size = 1, replace = FALSE, weight = NULL, .env = NULL)
sample_n.data.frame(tbl, size, replace = FALSE, weight = NULL, .env = NULL)
sample_n.default(tbl, size, replace = FALSE, weight = NULL, .env = parent.frame())
sample_n.grouped_df(tbl, size, replace = FALSE, weight = NULL, .env = NULL)
select.data.frame(.data, ...)
select.default(.data, ...)
select.grouped_df(.data, ...)
select.tbl_cube(.data, ...)
select_.data.frame(.data, ..., .dots = list())
select_.grouped_df(.data, ..., .dots = list())
select_.tbl_cube(.data, ..., .dots = list())
semi_join.data.frame(x, y, by = NULL, copy = FALSE, ...)
semi_join.tbl_df(x, y, by = NULL, copy = FALSE, ..., na_matches = pkgconfig::get_config("dplyr::na_matches"))
setdiff.data.frame(x, y, ...)
setdiff.default(x, y, ...)
setequal.data.frame(x, y, ...)
setequal.default(x, y, ...)
slice.data.frame(.data, ...)
slice.default(.data, ...)
slice.tbl_df(.data, ...)
slice_.data.frame(.data, ..., .dots = list())
slice_.tbl_df(.data, ..., .dots = list())
src_tbls.src_local(x, ...)
summarise.data.frame(.data, ...)
summarise.default(.data, ...)
summarise.tbl_cube(.data, ...)
summarise.tbl_df(.data, ...)
summarise_.data.frame(.data, ..., .dots = list())
summarise_.tbl_cube(.data, ..., .dots = list())
summarise_.tbl_df(.data, ..., .dots = list())
tbl.DBIConnection(src, from, ...)
tbl.src_local(src, from, ...)
tbl_vars.data.frame(x)
tbl_vars.tbl_cube(x)
transmute.default(.data, ...)
transmute_.default(.data, ..., .dots = list())
ungroup.data.frame(x, ...)
ungroup.grouped_df(x, ...)
ungroup.rowwise_df(x, ...)
union.data.frame(x, y, ...)
union.default(x, y, ...)
union_all.data.frame(x, y, ...)
union_all.default(x, y, ...)
