% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/locale.R
\name{dplyr_locale}
\alias{dplyr_locale}
\title{Locale used by dplyr}
\usage{
dplyr_locale()
}
\description{
\code{dplyr_locale()} returns a single string representing the default locale used
by dplyr when ordering character vectors. It is used as the default value of
\code{.locale} in \code{\link[=arrange]{arrange()}}.
\subsection{Default locale}{
\itemize{
\item If stringi >=1.5.3 is installed, the default locale is set to American
English, represented by the locale identifier \code{"en"}.
\item If stringi is not installed or is older than 1.5.3, the default locale
falls back to the C locale, represented by \code{"C"}. When this occurs, a
warning will be thrown encouraging you to either install stringi or
replace usage of \code{dplyr_locale()} with \code{"C"} to explicitly force the C
locale.
}
}

\subsection{Global override}{

To override the above default behavior, you can set the global option,
\code{dplyr.locale}, to either \code{"C"} or a stringi locale identifier from
\code{\link[stringi:stri_locale_list]{stringi::stri_locale_list()}} to globally alter the default locale.
Setting this option to anything other than \code{"C"} requires stringi >=1.5.3.

We generally recommend that you set the \code{.locale} argument of \code{\link[=arrange]{arrange()}}
explicitly rather than overriding the global locale, if possible.

Another alternative is to only change the global locale within a limited
scope through the use of \code{\link[rlang:local_options]{rlang::local_options()}} or \code{\link[rlang:local_options]{rlang::with_options()}}.
This can be useful when a package that you don't control calls \code{arrange()}
internally.
}
}
\examples{
\dontshow{if (dplyr:::has_minimum_stringi()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Default locale is American English
dplyr_locale()

# This Danish letter is typically sorted after `z`
df <- tibble(x = x <- c("o", "p", "\u00F8", "z"))
df

# The American English locale sorts it right after `o`
arrange(df, x)

# Explicitly override `.locale` to `"da"` for Danish ordering
arrange(df, x, .locale = "da")

# Or temporarily override the `dplyr.locale` global option, which is useful
# if `arrange()` is called from a function you don't control
col_sorter <- function(df) {
  arrange(df, x)
}

rlang::with_options(dplyr.locale = "da", {
  col_sorter(df)
})
\dontshow{\}) # examplesIf}
}
\keyword{internal}
