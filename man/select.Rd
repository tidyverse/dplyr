% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manip.r
\name{select}
\alias{select}
\alias{rename}
\title{Select/rename variables by name}
\usage{
select(.data, ...)

rename(.data, ...)
}
\arguments{
\item{.data}{A tbl. All main verbs are S3 generics and provide methods
for \code{\link[=tbl_df]{tbl_df()}}, \code{\link[dtplyr:tbl_dt]{dtplyr::tbl_dt()}} and \code{\link[dbplyr:tbl_dbi]{dbplyr::tbl_dbi()}}.}

\item{...}{One or more unquoted expressions separated by commas.
You can treat variable names like they are positions.

Positive values select variables; negative values to drop variables.
If the first expression is negative, \code{select()} will automatically
start with all variables.

Use named arguments to rename selected variables.

These arguments are automatically \link[rlang:quo]{quoted} and
\link[rlang:eval_tidy]{evaluated} in a context where column names
represent column positions. They support
\link[rlang:quasiquotation]{unquoting} and splicing. See
\code{vignette("programming")} for an introduction to these concepts.}
}
\value{
An object of the same class as \code{.data}.
}
\description{
\code{select()} keeps only the variables you mention; \code{rename()}
keeps all variables.
}
\section{Useful functions}{

As well as using existing functions like \code{:} and \code{c()}, there are
a number of special functions that only work inside \code{select}
\itemize{
\item \code{\link[=starts_with]{starts_with()}}, \code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}}
\item \code{\link[=matches]{matches()}}
\item \code{\link[=num_range]{num_range()}}
}

To drop variables, use \code{-}.

Note that except for \code{:}, \code{-} and \code{c()}, all complex expressions
are evaluated outside the data frame context. This is to prevent
accidental matching of data frame variables when you refer to
variables from the calling context.
}

\section{Scoped selection and renaming}{


The three \link{scoped} variants of \code{select()} (\code{\link[=select_all]{select_all()}},
\code{\link[=select_if]{select_if()}} and \code{\link[=select_at]{select_at()}}) and the three variants of
\code{rename()} (\code{\link[=rename_all]{rename_all()}}, \code{\link[=rename_if]{rename_if()}}, \code{\link[=rename_at]{rename_at()}}) make it
easy to apply a renaming function to a selection of variables.
}

\section{Context of evaluation}{


Quoting verbs usually support references to both objects from the
data frame and objects from the calling context. Selecting verbs
behave a bit differently.
\itemize{
\item Bare names are evaluated in the data frame only. You cannot refer
to local objects unless you explicitly unquote them with \code{!!}.
\item Calls to helper functions are evaluated in the calling context
only. You can safely and directly refer to local objects.
}
}

\section{Tidy data}{

When applied to a data frame, row names are silently dropped. To preserve,
convert to an explicit variable with \code{\link[tibble:rownames_to_column]{tibble::rownames_to_column()}}.
}

\examples{
iris <- as_tibble(iris) # so it prints a little nicer

select(iris, starts_with("Petal"))
select(iris, ends_with("Width"))

# Move Species variable to the front
select(iris, Species, everything())

df <- as.data.frame(matrix(runif(100), nrow = 10))
df <- tbl_df(df[c(3, 4, 7, 1, 9, 8, 5, 2, 6, 10)])
select(df, V4:V6)
select(df, num_range("V", 4:6))

# Drop variables with -
select(iris, -starts_with("Petal"))


# When selecting with bare symbols, you can only refer to data
# frame objects. This avoids ambiguity. If you want to refer to
# local objects, you can explicitly unquote them. They must contain
# column positions (integers) or column names (strings):
Species <- 2
select(iris, Species)     # Picks up `Species` from the data frame
select(iris, !! Species)  # Picks up the local object referring to column 2

# On the other hand, function calls behave the opposite way. They
# are evaluated in the local context only and cannot refer to data
# frame objects. This makes it easy to refer to local variables:
x <- "Petal"
select(iris, starts_with(x))  # Picks up the local variable `x`


# The .data pronoun is available:
select(mtcars, .data$cyl)
select(mtcars, .data$mpg : .data$disp)

# However it isn't available within calls since those are evaluated
# outside of the data context. This would fail if run:
# select(mtcars, identical(.data$cyl))


# Renaming -----------------------------------------
# * select() keeps only the variables you specify
select(iris, petal_length = Petal.Length)

# * rename() keeps all variables
rename(iris, petal_length = Petal.Length)
}
\seealso{
Other single table verbs: \code{\link{arrange}},
  \code{\link{filter}}, \code{\link{mutate}},
  \code{\link{slice}}, \code{\link{summarise}}
}
