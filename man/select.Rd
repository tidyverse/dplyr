% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select.R
\name{select}
\alias{select}
\alias{rename}
\title{Select/rename variables by name}
\usage{
select(.data, ...)

rename(.data, ...)
}
\arguments{
\item{.data}{A tbl. All main verbs are S3 generics and provide methods
for \code{\link[=tbl_df]{tbl_df()}}, \code{\link[dtplyr:tbl_dt]{dtplyr::tbl_dt()}} and \code{\link[dbplyr:tbl_dbi]{dbplyr::tbl_dbi()}}.}

\item{...}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> One or more unquoted
expressions separated by commas. You can treat variable names like they
are positions, so you can use expressions like \code{x:y} to select ranges of
variables.

Use named arguments, e.g. \code{new_name = old_name}, to rename selected
variables.}
}
\value{
An object of the same type as \code{.data}. The rows will be left as; only
the columns (position and/or name) will be changed.
}
\description{
Select or rename variables in a data frame, using a concise mini-language
that makes it easy to refer to variables based on their name (e.g.
\code{a:f} selects all columns between \code{a} on the left to \code{f} on the right).
You can also use predicate functions like \link{is.numeric} to select variables
based on their properties.
}
\section{Useful functions}{

As well as using existing functions like \code{:} and \code{c()}, there are
a number of special functions that only work inside \code{select()}:
\itemize{
\item \code{\link[=any_of]{any_of()}}, \code{\link[=all_of]{all_of()}}.
\item \code{\link[=starts_with]{starts_with()}}, \code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}}, \code{\link[=matches]{matches()}}.
\item \code{\link[=num_range]{num_range()}}.
\item \code{\link[=group_cols]{group_cols()}}, \code{\link[=last_col]{last_col()}}.
\item \code{\link[=everything]{everything()}}.
}

You can also use predicate functions (functions that return a single \code{TRUE}
or \code{FALSE}) like \code{is.numeric}, \code{is.character}, and \code{is.factor}
to select variables with specific types.

Selections can be combined using Boolean algebra like:
\itemize{
\item \code{starts_with("a") & ends_with("x")}: start with "a" and end with "x"
\item \code{starts_with("a") | starts_with("b")}: start with "a" or "b"
\item \code{!starts_with("a")}: doesn't start with "a"
}

To remove variables from a selection, use \code{-}:
\itemize{
\item \code{starts_with("a") - ends_width("x")}: start with "a" and doesn't end with "x"
\item \code{is.numeric - c(a, b, c)}: numeric variables except for \code{a}, \code{b}, \code{c}.
}

See \link[tidyselect:select_helpers]{select helpers} for more details and
examples.

Note that except for \code{:}, \code{-} and \code{c()}, all complex expressions
are evaluated outside the data frame context. This is to prevent
accidental matching of data frame variables when you refer to
variables from the calling context.
}

\section{Scoped selection and renaming}{


The three \link{scoped} variants of \code{select()} (\code{\link[=select_all]{select_all()}},
\code{\link[=select_if]{select_if()}} and \code{\link[=select_at]{select_at()}}) and the three variants of
\code{rename()} (\code{\link[=rename_all]{rename_all()}}, \code{\link[=rename_if]{rename_if()}}, \code{\link[=rename_at]{rename_at()}}) make it
easy to apply a renaming function to a selection of variables.
}

\examples{
iris <- as_tibble(iris) # so it prints a little nicer
select(iris, starts_with("Petal"))
select(iris, ends_with("Width"))
select(iris, !starts_with("Petal"))
select(iris, starts_with("Petal") & ends_with("Width"))
select(iris, is.numeric)

df <- as.data.frame(matrix(runif(100), nrow = 10))
df <- as_tibble(df[c(3, 4, 7, 1, 9, 8, 5, 2, 6, 10)])
select(df, V4:V6)
select(df, num_range("V", 4:6))

# Select the grouping variables:
starwars \%>\% group_by(gender) \%>\% select(group_cols())

# Moving variables around --------------------------
# Move `Species` to the front
select(iris, Species, everything())

# Move `Sepal.Length` to the back: first select everything except
# `Sepal.Length`, then select `Sepal.Length`
select(iris, !Sepal.Length, Sepal.Length)

# Renaming -----------------------------------------
# * select() keeps only the variables you specify
select(iris, petal_length = Petal.Length)

# * rename() keeps all variables
rename(iris, petal_length = Petal.Length)

# * select() can rename variables in a group
select(iris, obs = starts_with('S'))
}
\seealso{
Other single table verbs: 
\code{\link{arrange}()},
\code{\link{filter}()},
\code{\link{mutate}()},
\code{\link{slice}()},
\code{\link{summarise}()}
}
\concept{single table verbs}
