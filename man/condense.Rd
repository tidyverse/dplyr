% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/condense.r
\name{condense}
\alias{condense}
\title{Condense values into list-columns}
\usage{
condense(.data, ...)
}
\arguments{
\item{.data}{A data frame, data frame extension (e.g. a tibble), or a
lazy data frame (e.g. from dbplyr or dtplyr). See \emph{Methods}, below, for
more details.}

\item{...}{<\code{\link[=dplyr_tidy_eval]{tidy-eval}}> Name-value pairs of functions.
All outputs will be automatically wrapped in lists, making it most
suitable for functions that that return non-vectors (e.g. linear models)
or vectors of length greater than one.}
}
\value{
A \link{rowwise} object.
\itemize{
\item The rows and initial columns come from \code{group_data(.data)}.
\item Each additional column that you provide will be wrapped in a list column.
\item Output is grouped by row.
\item Data frame attributes are \strong{not} preserved, because \code{condense()}
fundamentally creates a new data frame.
}
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

\code{condense()} is an experimental variant of \code{\link[=summarise]{summarise()}} designed to make it
as easy as possible to work with list-columns. It is particularly powerful when
working with models: you can fit models per group with \code{condense()} and then
flexibly extract components with \code{summarise()}.

It has three special properties:
\itemize{
\item It only ever returns a single row per group.
\item Each new column is always wrapped in a list.
\item It returns a \code{\link[=rowwise]{rowwise()}} output.
}

It's hard to explain \code{condense()} in isolation, so if you find these ideas
intriguing we recommend starting with \code{vignette("rowwise")}.
}
\section{Methods}{

This function is a \strong{generic}, which means that packages can provide
implementations (methods) for other classes. See the documentation of
individual methods for extra arguments and differences in behaviour.

The following methods are currently available in loaded packages:
\Sexpr[stage=render,results=Rd]{dplyr:::methods_rd("condense")}.
}

\examples{
# Modelling ------------------------------------------------
mods <- mtcars \%>\%
  group_by(cyl) \%>\%
  condense(mod = lm(mpg ~ disp, data = across()))
mods

mods \%>\%
  mutate(rsq = summary(mod)$r.squared)

if (requireNamespace("broom")) {
  mods \%>\% summarise(broom::glance(mod))
  mods \%>\% summarise(broom::tidy(mod))
  mods \%>\% summarise(broom::augment(mod))
}
}
