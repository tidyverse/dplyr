% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/condense.r
\name{condense}
\alias{condense}
\title{Condense values into list-columns}
\usage{
condense(.data, ...)
}
\arguments{
\item{.data}{a tbl}

\item{...}{<\code{\link[=dplyr_tidy_eval]{tidy-eval}}> Name-value pairs of functions.
Allow outputs will be automatically wrapped in lists, making it most
suitable for functions that that return non-vectors (e.g. linear models)
or vectors of length greater than one.}
}
\description{
\Sexpr[results=rd, stage=render]{lifecycle::badge("experimental")}

\code{condense()} is an experimental variant of \code{\link[=summarise]{summarise()}} designed to make it
as easy as possible to work with list-columns. It is particularly powerful when
working with models: you can fit models per group with \code{condense()} and then
flexibly extract components with \code{summarise()}.

It has three special properties:
\itemize{
\item It only ever returns a single row per group.
\item Each new column is always wrapped in a list.
\item It returns a \code{\link[=rowwise]{rowwise()}} output.
}

It's hard to explain \code{condense()} in isolation, so if you find these ideas
intriguing we recommending starting with \code{vignette("rowwise")}.
}
\examples{
# Modelling ------------------------------------------------
mods <- mtcars \%>\%
  group_by(cyl) \%>\%
  condense(mod = lm(mpg ~ disp, data = across()))
mods

mods \%>\%
  mutate(rsq = summary(mod)$r.squared)

if (requireNamespace("broom")) {
  mods \%>\% summarise(broom::glance(mod))
  mods \%>\% summarise(broom::tidy(mod))
  mods \%>\% summarise(broom::augment(mod))
}
}
