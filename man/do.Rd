% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/do.r
\name{do}
\alias{do}
\title{Do arbitrary computations}
\usage{
do(.data, ...)
}
\arguments{
\item{.data}{a tbl}

\item{...}{<\code{\link[=dplyr_tidy_eval]{tidy-eval}}> Name-value pairs of functions.
Allow outputs will be automatically wrapped in lists, making it most
suitable for functions that that return non-vectors (e.g. linear models)
or vectors of length greater than one.}
}
\description{
\code{do()} is a variant of \code{\link[=summarise]{summarise()}} designed to make it as easy as
possible to work with list-columns.  It is particularly powerful when
working with models: you can fit models per group with \code{do()} and then
flexibly extract components with \code{summarise()}.

It has three special properties:
\itemize{
\item It only ever returns a single row per group.
\item Each new column is always wrapped in a list.
\item It returns a \code{\link[=rowwise]{rowwise()}} output.
}

It's hard to explain \code{do()} in isolation, so if you find these ideas
intriguing we recommending starting with \code{vignette("rowwise")}.
}
\section{dplyr 1.0.0}{

We questioned the utility of \code{do()} for a long time, because something about
the way it worked just didn't click with the rest of dplyr. \code{do()} has
returned to active status in dplyr 1.0.0, although its scope is narrower
than in the past because two of its main features are now available in
more places:
\itemize{
\item \code{.} in \code{do()} used to be only way to easily compute on the entire
data frame representing the "curent" group; now you can access that
data frame in any verb with \code{\link[=across]{across()}}.
\item You could supply a single unnamed argument that returned a data frame
that would be unnested into the current group. You can now do this in
\code{summarise()} since it gained support for multi-row and multi-column
outputs.
}

This allowed us to focus in the most useful aspect of \code{do()}: its ability
to easily generate list-columns and to return a \link{rowwise} data frame that
eliminates the need to manually vectorised functions with purrr's map
functions. Compared to previous versions, \code{do()} is also more useful because
it retains existing grouping.
}

\examples{
# Modelling ------------------------------------------------
mods <- mtcars \%>\%
  group_by(cyl) \%>\%
  do(mod = lm(mpg ~ disp, data = across()))
mods

mods \%>\%
  mutate(rsq = summary(mod)$r.squared)

if (requireNamespace("broom")) {
  mods \%>\% summarise(broom::glance(mod))
  mods \%>\% summarise(broom::tidy(mod))
  mods \%>\% summarise(broom::augment(mod))
}
}
